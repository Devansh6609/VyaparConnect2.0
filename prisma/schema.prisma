generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String      @id @default(cuid())
  name               String
  email              String      @unique
  phone              String?     @unique
  password           String
  whatsappBusinessId String?     @unique
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  contacts           Contact[]
  products           Product[]
  quotations         Quotation[] @relation("UserQuotations")
}

model Contact {
  id          String      @id @default(cuid())
  name        String
  phone       String      @unique
  lastAddress String?
  avatarUrl   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  messages    Message[]
  quotations  Quotation[] @relation("ContactQuotations")
  unreadCount Int         @default(0)
}

model Message {
  id        String   @id @default(cuid())
  from      String // "business" or "customer"
  to        String
  text      String?
  mediaUrl  String?
  type      String // text, image, document
  createdAt DateTime @default(now())
  contact   Contact  @relation(fields: [contactId], references: [id])
  contactId String
  replyToText String?
  wamid       String?
}

model Product {
  id          String          @id @default(cuid())
  name        String
  description String?
  price       Float
  category    String?
  inStock     Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  items       QuotationItem[] // relation with QuotationItem
  images      ProductImage[]
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Quotation {
  id            String          @id @default(cuid())
  customerName  String
  contactNumber String
  address       String
  total         Float           @default(0) // âœ… ADD @default(0) HERE
  createdAt     DateTime        @default(now())
  user          User?           @relation("UserQuotations", fields: [userId], references: [id])
  userId        String?
  contact       Contact?        @relation("ContactQuotations", fields: [contactId], references: [id])
  contactId     String?
  items         QuotationItem[]
  payment       Payment?
}

model QuotationItem {
  id          String    @id @default(cuid())
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  quotationId String
  quantity    Int       @default(1)
  price       Float
}

model Payment {
  id                String    @id @default(cuid())
  razorpayOrderId   String    @unique
  razorpayPaymentId String?
  amount            Float
  status            String    @default("CREATED") // CREATED, PAID, FAILED, REFUNDED
  createdAt         DateTime  @default(now())
  quotation         Quotation @relation(fields: [quotationId], references: [id])
  quotationId       String    @unique
}
